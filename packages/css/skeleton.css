.ds-skeleton {
  --dsc-skeleton-animation-duration: 0.8s;
  --dsc-skeleton-animation: ds-skeleton-opacity-fade var(--dsc-skeleton-animation-duration) linear infinite alternate;
  --dsc-skeleton-background: var(--ds-color-neutral-surface-default);

  animation: var(--dsc-skeleton-animation);
  border-radius: min(1rem, var(--ds-border-radius-lg));
  box-sizing: border-box;
  display: block;
  height: 1.3em;
  pointer-events: none;
  user-select: none;
  width: 100%;

  &[data-variant='circle'] {
    aspect-ratio: 1 / 1;
    border-radius: var(--ds-border-radius-full);
    width: 1.3em;
  }

  &[data-variant='text'] {
    animation: none;
    border-radius: var(--ds-border-radius-full);
    height: auto;
    position: relative; /* So we can position ::after */

    /* Render with ::after so we can add some space to top and bottom */
    &::after {
      content: '';
      animation: var(--dsc-skeleton-animation);
      border-radius: inherit;
      inset: 20% 0;
      position: absolute;
    }

    &:empty::before {
      content: '\00a0'; /* Add non breaking space if empty so we follow line height */
    }
  }

  /* When having children, let them define size */
  &:not(:empty) {
    width: fit-content;
    height: fit-content;
    color: transparent !important;

    & > * {
      visibility: hidden;
    }
  }

  @media (prefers-reduced-motion: reduce) {
    --dsc-skeleton-animation-duration: 1.6s;
  }
}

/* Animates background instead of opacity to make Axe Accessibility tests understand color: transparent is intentionally set */
@keyframes ds-skeleton-opacity-fade {
  from {
    background: var(--dsc-skeleton-background);
  }

  to {
    background: rgb(from var(--dsc-skeleton-background) r g b / 0.4);
  }
}
