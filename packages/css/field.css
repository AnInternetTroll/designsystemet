.ds-field {
  align-items: start;
  display: flex;
  flex-direction: column;
  gap: var(--ds-spacing-2);

  @composes ds-body-text--md from './base/base.css';

  &[data-size='sm'] {
    @composes ds-body-text--sm from './base/base.css';
  }

  &[data-size='lg'] {
    @composes ds-body-text--lg from './base/base.css';
  }

  & [data-field='description'] {
    color: var(--ds-color-neutral-text-subtle); /* TODO: Change to opacity or color-mix(currentColor, trasparent) to ensure contrast when parent element color changes? */
  }

  /**
   * States
   */
  &:has([aria-disabled='true'], :disabled) > * {
    cursor: not-allowed;
    opacity: var(--ds-disabled-opacity);
  }

  &:has([aria-readonly='true'], [readonly]) label {
    --dsc-label--readonly: ; /* Activate lock icon for label when readonly */
  }

  /**
   * Toggle inputs
   */
  &:has(input:is([type='radio'], [type='checkbox'])) {
    border-radius: var(--ds-border-radius-md);
    display: grid;
    grid-template-columns: auto 1fr;
    row-gap: 0;
    width: fit-content; /* Rather do display: grid + width: fit-content than display: inline-grid to encourage stacked radios */

    & > * {
      grid-column: 2; /* Only allow input in column 1 */
    }

    & label {
      --dsc-label--readonly: initial; /* Never show lock icon on toggle inputs */
      font-weight: var(--ds-font-weight-regular);
    }

    & input {
      grid-column: 1; /* Always place input in column 1 */
      grid-row: 1; /* Always place input in row 1 */
      outline: none;
      box-shadow: none;
    }

    &:not(:has([readonly], [aria-disabled='true'], :disabled)) label {
      cursor: pointer;
    }

    &:has(input:focus-visible) {
      @composes ds-focus--visible from './base/base.css';
    }

    &:has(input:only-child) {
      gap: 0; /* No gap only <input> with aria-label/aria-labelledby */
    }
  }
}
