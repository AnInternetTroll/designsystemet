import path from 'path';

import postcss from 'postcss';
import postcssModules from 'postcss-modules';
import glob from 'fast-glob';
import fs from 'fs-extra';
import * as R from 'ramda';

import { generateScopedName } from './name';

const outputFolder = path.resolve(__dirname, '../../css');
fs.ensureDirSync(outputFolder);

/** To exclude files when we start writing css manually */
const ignore = [''];
const additional = ['utility.module.css'];

const findComponentName = (filePath: string) => {
  let fileName = filePath.split('/src/')[1];

  if (filePath.includes('utilities/')) {
    fileName = fileName.split('utilities/')[1].split('/')[0];
  }

  if (fileName.includes('legacy/')) {
    fileName = fileName.split('legacy/')[1].split('/')[0];
  }

  const name = fileName
    .split('/')
    .find(
      (partial) =>
        partial[0] === partial[0].toUpperCase() || additional.includes(partial),
    );

  if (!name) {
    throw new Error(`Could not make name from ${fileName} at ${filePath}`);
  }

  return name;
};

const fileName = R.pipe(R.split('/'), R.last, R.defaultTo(''));
const fileNames = R.pipe(R.map(fileName), R.join(', '));

const withFileHeader = (css: string, files: string[]) =>
  `/** This css file was autogenerated from ${fileNames(files)} **/\n${css}`;

const makeCss = async (filePath: string) => {
  const file = fs.readFileSync(filePath, 'utf-8');

  return await postcss([
    postcssModules({
      generateScopedName,
      getJSON: () => {
        return;
      },
      scopeBehaviour: 'local',
    }),
  ]).process(file, {
    from: filePath,
  });
};

const makeDir = (folder: string) => {
  if (!fs.existsSync(folder)) {
    fs.mkdirSync(folder);
  }
};

const writeIndex = (fileName: string, cssFiles: string[]) => {
  const cssFilesContent = cssFiles.map((file) => `@import url('${file}');`);
  fs.writeFileSync(
    path.join(outputFolder, fileName),
    `@charset "UTF-8";\n${cssFilesContent.join('\n')}\n`,
  );

  return [fileName, ...cssFiles];
};

async function createFiles() {
  console.log('\n🏗️  Started building css files...');

  const modules = glob.sync(
    path.resolve(__dirname, '../src/**/*.module.css').replace(/\\/g, '/'),
  );
  const generatedComponents: string[] = [];

  // group files that are under src/components/{THIS IS THE NAME}
  const componentFiles = modules.reduce<{ [key: string]: string[] }>(
    (components, filePath) => {
      const name = findComponentName(filePath);

      if (ignore.includes(name.toLowerCase())) {
        console.log('🛑 Ignoring component ', name);
        return components;
      }

      components[name] = !components[name]
        ? [filePath]
        : [...components[name], filePath];

      return components;
    },
    {},
  );
  console.log('\n🧩 Found components', Object.keys(componentFiles));

  await Promise.all(
    Object.entries(componentFiles).map(async ([componentName, files]) => {
      componentName = componentName.toLowerCase().split('.')[0];

      const fileName = `${componentName}.css`;

      const results = await Promise.all(
        files.map(async (filePath) => makeCss(filePath)),
      );

      const css = withFileHeader(
        results.map((result) => result.css).join('\n'),
        files,
      );

      let outputPath = path.join(outputFolder, fileName);

      if (files[0].includes('legacy')) {
        makeDir(path.join(outputFolder, 'legacy'));
        outputPath = path.join(outputFolder, 'legacy', fileName);
      }

      if (files[0].includes('utilities')) {
        makeDir(path.join(outputFolder, 'utilities'));
        outputPath = path.join(outputFolder, 'utilities', fileName);
      }

      generatedComponents.push(
        outputPath.replace(/\\/g, '/').split('/css/')[1],
      );

      return fs.writeFile(outputPath, css);
    }),
  ).then(() => {
    const [utilityFiles, componentFiles] = R.partition(
      R.includes('utilities/'),
      generatedComponents,
    );

    writeIndex('utilities.css', utilityFiles);
    const createdFiles = writeIndex('index.css', [
      'utilities.css',
      ...componentFiles,
    ]);

    console.log('\n👷 Created CSS files: \n ', createdFiles);

    return Promise.resolve();
  });

  console.log('\n🏁 Finished building css files!');
}

void createFiles();
