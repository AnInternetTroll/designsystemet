.container {
  position: relative;
}

.spacing {
  padding-left: calc(var(--fds-spacing-6) + 17px);
}

.icon {
  grid-area: input;
  pointer-events: none;
  width: var(--fds-sizing-6);
  height: var(--fds-sizing-6);
  margin: auto;
  overflow: visible;
}

.label {
  padding-left: 3px;
  min-height: 2.3em;
  min-width: min-content;
  display: inline-flex;
  flex-direction: row;
  gap: var(--fds-spacing-1);
  align-items: center;
  cursor: pointer;
}

.description {
  padding-left: 3px;
  margin-top: calc(var(--fds-spacing-2) * -1);
  color: var(--fds-semantic-text-neutral-subtle);
}

.control {
  --fds-inner-focus-border-color: var(--fds-semantic-border-focus-boxshadow);
  --fds-outer-focus-border-color: var(--fds-semantic-border-focus-outline);
  --fds-focus-border-width: 3px;

  position: absolute;
  left: 0;
  top: 0;
  width: var(--fds-sizing-10);
  height: var(--fds-sizing-10);
  display: inline-grid;
  grid: [input] 1fr / [input] 1fr;
  gap: var(--fds-spacing-2);
  grid-auto-flow: column;
}

.container.small {
  min-width: var(--fds-sizing-8);
  min-height: var(--fds-sizing-8);
}

.container.medium {
  min-width: var(--fds-sizing-10);
  min-height: var(--fds-sizing-10);
}

.container.large {
  min-width: var(--fds-sizing-12);
  min-height: var(--fds-sizing-12);
}

.container.small .control {
  width: var(--fds-sizing-8);
  height: var(--fds-sizing-8);
}

.container.medium .control {
  width: var(--fds-sizing-10);
  height: var(--fds-sizing-10);
}

.container.large .control {
  width: var(--fds-sizing-12);
  height: var(--fds-sizing-12);
}

.radio,
.radio .icon {
  border-radius: var(--fds-border_radius-full);
}

.input {
  height: 100%;
  width: 100%;
  opacity: 0;
  margin: 0;
  grid-area: input;
  cursor: pointer;
}

.readonly > .control > .input,
.readonly > .label {
  cursor: default;
}

.disabled > .control .input,
.disabled > .label {
  cursor: not-allowed;
  color: var(--fds-semantic-border-neutral-subtle);
}

.disabled > .description {
  color: var(--fds-semantic-border-neutral-subtle);
}

.input:not(:checked) ~ .icon .checked {
  display: none;
}

.input:checked ~ .icon .checked {
  display: inline;
  fill: var(--fds-semantic-border-input-hover);
}

.input:not(:checked) ~ .icon .box {
  stroke: var(--fds-semantic-border-input-default);
}

.input:checked ~ .icon .box {
  stroke: var(--fds-semantic-border-input-hover);
}

.input:disabled ~ .icon .box {
  stroke: var(--fds-semantic-border-neutral-subtle);
}

.input:focus-visible ~ .icon {
  outline: var(--fds-focus-border-width) solid var(--fds-outer-focus-border-color);
  outline-offset: 0;
}

.input:focus-visible ~ .icon .box {
  stroke: var(--fds-semantic-border-focus-boxshadow);
  stroke-width: var(--fds-focus-border-width);
}

.input:disabled ~ .icon .checked {
  fill: var(--fds-semantic-border-neutral-subtle);
}

.error .input:not(:disabled, :focus-visible) ~ .icon .box {
  stroke: var(--fds-semantic-border-danger-default);
}

.error .input:not(:disabled, :focus-visible) ~ .icon .checked {
  fill: var(--fds-semantic-border-danger-default);
}

.readonly .input:read-only:not(:focus-visible) ~ .icon .box {
  stroke: var(--fds-semantic-border-neutral-subtle);
  fill: var(--fds-semantic-background-subtle);
}

.readonly .input:read-only:not(:focus-visible):is(:checked) ~ .icon .checked {
  fill: var(--fds-semantic-border-neutral-default);
}

/* Only use hover for non-touch devices to prevent sticky-hovering */
@media (hover: hover) and (pointer: fine) {
  .container:not(.disabled, .readonly) > .control:hover,
  .container:not(.disabled, .readonly):has(.label:hover) > .control {
    background: var(--fds-semantic-surface-info-subtle-hover);
  }

  .container:not(.disabled, .readonly) > .label:hover,
  .container:not(.disabled, .readonly) > .control:hover ~ .label {
    color: var(--fds-semantic-border-input-hover);
  }

  .container:not(.disabled, .readonly) > .control:hover > .icon > .box,
  .container:not(.disabled, .readonly):has(.label:hover) > .control > .icon > .box {
    stroke: var(--fds-semantic-border-input-hover);
  }
}
